library(swirl)
swirl()
c(0.5,55,-10,6)
?c
num_vect<-c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect <- 6
num_vect <= 6
num_vect >= 6
my_char<-c("My","name","is")
my_char
paste(my_char)
paste(my_char,collapse=" ")
c(my_char,"Marek")
c(my_char,"MArek")
my_name<-c(my_char,"Marek")
my_name
paste(my_name,collapse=" ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X","Y","Z"),sep=""")
)
")"
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4, sep="-")
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
my_data
my_na<-is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)&x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11,bar=2,norf=NA)
vect
name(vect)
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector<-c(1:20)
my_vector<-1:20
my_vector
dim)my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix2<-matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(my_data)<-cnames
my_Data
my_data
set.seed(20)
x<-rnorm(100)
e<-rnorm(100,0,2)
y<-0.5+2*x+e
summary(y)
plot(x,y)
set.seed(10)
x<-rbinom(100,1,0.5)
e<-rnorm(100,0,2)
y<-0.5+2*x+e
summary(y)
plot(x,y)
set.seed(1)
x<-rnorm(100)
log.mu<-0.5+0.3*x
y<-rpois(100,exp(log.mu))
summary(y)
plot(x,y)
sample(1:10)
sample(1:10)
sample(1:10,replace=TRUE)
hilbert<-function(n){}
hilbert<-function(n){
i<-1:n
1/outer(i-1,i,"+")
}
x<-hilbert(1000)
system.time(svd(x))
system.time(svd(x))
KML
?MKL
install.packages("MKL")
install.packages("rJava")
.libPaths()
install.packages("h2o")
library(h20)
library(h2o)
localH2o = h2o.init()
h2o.shutdown()
h2o.shutdown(localH2o)
h2o
localH2o
h2o.shutdown(localH2o)
localH2o = h2o.init(nthreads=-1)
demo
?demo
demo(h20.glm)
demo(h2o.glm)
demo(h2o.deepLerning)
h2o
?h2o
demo(h2o.glm)
demo(h2o.prcomp)
demo(h2o)
demo(h2o.deeplearning)
library(gputools)
install.packages("gputools")
install.packages("rpud")
install.packages("rpudplus")
install.packages("F:/Instalki/rpux_0.5.0_win/rpux_0.5.0/rpudplus_0.5.0.zip", repos = NULL)
library(rpud)
library(rpudplus)
install.packages("F:/Instalki/rpux_0.5.0_win/rpux_0.5.0/rpud_0.5.0.zip", repos = NULL)
library(rpudplus)
library(rpud)
install.packages("F:/Instalki/rpux_0.5.0_win/rpux_0.5.0/rpud_0.5.0_src.zip", repos = NULL)
install.packages("F:/Instalki/rpux_0.5.0_win/rpux_0.5.0/rpud_0.5.0.zip", repos = NULL)
install.packages("F:/Instalki/rpux_0.5.0_win/rpux_0.5.0/rpudplus_0.5.0.zip", repos = NULL)
library(rpudplus)
library(rpud)
library(rpudplus)
library(UsingR)
install.packages("UsingR")
library(UsingR)
data(galton)
par(mfrow=c(1,2))
hist(galton$child,col="blue",breaks=100)
hist(galton$parent,col="blue",breaks=100)
library(manipulate)
myHist <- function(mu){}
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu,mu),c(0.150),col="red",lwd=5)
mse<-mean((galton$child-mu)^2)
text(63,150,paste("mu = ", mu))
text(63,140, paste("MSE = ", round(mse,2)))
}
manipulate(myHist(mu),mu=slider(62,74,setp=0.5))
manipulate(myHist(mu),mu=slider(62,74,step=0.5))
par(mfrow=c(1,1))
manipulate(myHist(mu),mu=slider(62,74,step=0.5))
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu,mu),c(0,150),col="red",lwd=5)
mse<-mean((galton$child-mu)^2)
text(63,150,paste("mu = ", mu))
text(63,140, paste("MSE = ", round(mse,2)))
}
manipulate(myHist(mu),mu=slider(62,74,step=0.5))
plot(galton$parent,galton$child,pch=19,col="blue")
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
u<-0.1471
I(x-mean(x))
?I
sum(w*(x-u)^2)
u=0.0025
sum(w*(x-u)^2)
u=1.077
sum(w*(x-u)^2)
u=0.3
sum(w*(x-u)^2)
data(mtcars)
fit<-lm(mtcars$mpg~mtcars$wt)
fit
x1<-rnorm(20,0,1)
y1<-rnorm(20,0,2)
?cor
cor(x1,y1)
plot(x1,y1)
x1<-rnorm(100,0,1)
y1<-rnorm(100,0,2)
plot(x1,y1)
cor(x1,y1)
y1<-x1*0.5
plot(x1,y1)
cor(x1,y1)
y1<-x1*rnorm(100,0,1)
plot(x1,y1)
cor(x1,y1)
1.5*0.4
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
x2<- (x-mean(x))/sd(x)
x2
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit2<-lm(y~x)
fit2
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
myplot<-function(b){
plot(x,y)
text(0,0,paste("mse = ",mse))
}
myplot<-function(b){
plot(x,y)
line(c(0,0),c(max(x)*b)
mse <- mean((x*b-y)^2)
text(0,0,paste("b = ",b))
text(0,1,paste("mse = ",mse))
}
myplot<-function(b){
plot(x,y)
line(c(0,0),c(max(x)*b))
mse <- mean((x*b-y)^2)
text(0,0,paste("b = ",b))
text(0,1,paste("mse = ",mse))
}
manipulate(myplot(b),b=slider(-2,2,step=0.05))
myplot<-function(b){
plot(x,y)
line(c(0,0),c(max(x),max(x)*b))
mse <- mean((x*b-y)^2)
text(0,0,paste("b = ",b))
text(0,1,paste("mse = ",mse))
}
manipulate(myplot(b),b=slider(-2,2,step=0.05))
line(c(0,0),c(3,3)
)
lines(c(0,0),c(3,3)
)
myplot<-function(b){
plot(x,y)
abline(0,b,lwd=3)
mse <- mean((x*b-y)^2)
text(0,0,paste("b = ",b))
text(0,1,paste("mse = ",mse))
}
manipulate(myplot(b),b=slider(-2,2,step=0.05))
myplot<-function(b){
plot(x,y)
abline(0,b,lwd=3)
mse <- mean((x*b-y)^2)
text(63,63,paste("b = ",b))
text(63,64,paste("mse = ",mse))
}
manipulate(myplot(b),b=slider(-2,2,step=0.05))
myplot<-function(b){
plot(x,y)
abline(0,b,lwd=3)
mse <- mean((x*b-y)^2)
text(63,150,paste("b = ",b))
text(63,140,paste("mse = ",mse))
}
manipulate(myplot(b),b=slider(-2,2,step=0.05))
myplot<-function(b){
plot(x,y)
abline(0,b,lwd=3)
mse <- mean((x*b-y)^2)
text(63,150,label=paste("b = ",b))
#text(63,140,paste("mse = ",mse))
}
manipulate(myplot(b),b=slider(-2,2,step=0.05))
myplot<-function(b){
plot(x,y)
abline(0,b,lwd=3)
mse <- mean((x*b-y)^2)
text(40,40,"b = ")
#text(63,140,paste("mse = ",mse))
}
manipulate(myplot(b),b=slider(-2,2,step=0.05))
> myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu,mu),c(0,150),col="red",lwd=5)
mse<-mean((galton$child-mu)^2)
text(63,150,paste("mu = ", mu))
text(63,140, paste("MSE = ", round(mse,2)))
}
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu,mu),c(0,150),col="red",lwd=5)
mse<-mean((galton$child-mu)^2)
text(63,150,paste("mu = ", mu))
text(63,140, paste("MSE = ", round(mse,2)))
}
manipulate(myHist(b),b=slider(-2,2,step=0.05))
myplot<-function(b){
plot(x,y)
abline(0,b,lwd=3)
mse <- mean((x*b-y)^2)
text(63,150,paste("mu = ", mu))
text(63,140, paste("MSE = ", round(mse,2)))
}
manipulate(myplot(b),b=slider(-2,2,step=0.05))
myplot<-function(b){
plot(x,y)
abline(0,b,lwd=3)
mse <- mean((x*b-y)^2)
text(63,150,paste("b = ", b))
text(63,140, paste("MSE = ", round(mse,2)))
}
manipulate(myplot(b),b=slider(-2,2,step=0.05))
myplot<-function(b){
plot(x,y)
abline(0,b,lwd=3)
mse <- mean((x*b-y)^2)
text(63,140, paste("MSE = ", round(mse,2)))
}
manipulate(myplot(b),b=slider(-2,2,step=0.05))
myplot<-function(b){
plot(x,y)
mse <- mean((x*b-y)^2)
text(63,140, paste("MSE = ", round(mse,2)))
abline(0,b,lwd=3)
}
manipulate(myplot(b),b=slider(-2,2,step=0.05))
myplot<-function(b){
plot(x,y)
mse <- mean((x*b-y)^2)
legend("topright", paste("MSE = ", round(mse,2)))
abline(0,b,lwd=3)
}
manipulate(myplot(b),b=slider(-2,2,step=0.05))
myplot<-function(b){
plot(x,y)
mse <- mean((x*b-y)^2)
legend("topright", paste("MSE = ", round(mse,6)))
abline(0,b,lwd=3)
}
manipulate(myplot(b),b=slider(-2,2,step=0.05))
manipulate(myplot(b),b=slider(0.5,1,step=0.005))
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
mean(x*p)
x
p
sum(x*p)
(0,75*0,3)/((0,75*0,3)+(0,48*0,7))
(0.75*0.3)/((0.75*0.3)+(0.48*0.7))
help(unzip)
setwd("F:/GitHub/RepData_PeerAssessment1")
help(unz)
data<-read.csv(unz("activity.zip","activity.csv"))
View(data)
help(as.date)
help(as.Date)
stepsByDay <- aggregate(steps~date,mydata,sum)
mydata<-read.csv(unz("activity.zip","activity.csv"))
mydata[,2] <- as.Date(mydata[,2])
mydata[,2] <- as.Date(mydata[,2])
stepsByDay <- aggregate(steps~date,mydata,sum)
View(stepsByDay)
View(stepsByDay)
is.na(mydata$steps)
aggregate(steps~interval,mydata[!is.na(mydata$steps),],mean)
stepsByInterval <- aggregate(steps~interval,mydata[!is.na(mydata$steps),],mean)
max(stepsByInterval$steps)
help(find)
stepsByInterval[steps== max(stepsByInterval$steps)]
stepsByInterval[stepsByInterval$steps== max(stepsByInterval$steps)]
stepsByInterval[stepsByInterval$steps== max(stepsByInterval$steps),]
stepsByInterval[stepsByInterval$steps== max(stepsByInterval$steps),1]
View(stepsByInterval)
View(stepsByInterval)
is.na(mydata$steps
)
length(is.na(mydata$steps))
length(mydata[is.na(mydata$steps),])
mydata[is.na(mydata$steps),]
nrow(mydata[is.na(mydata$steps),])
?impute
library(Hmisc)
?impute
plot(mydata$date,mydata$steps)
pairs(mydata)
weekdays(mydata)
weekdays(mydata$date)
weekdays(mydata$date) == Sunday
weekdays(mydata$date) == "Sunday"
(weekdays(mydata$date) == "Sunday") | (weekdays(mydata$date) == "Sturday")
(weekdays(mydata$date) == "Sunday") | (weekdays(mydata$date) == "Saturday")
sum((weekdays(mydata$date) == "Sunday") | (weekdays(mydata$date) == "Saturday"))
sum((weekdays(mydata$date) == "Sunday")
)
sum((weekdays(mydata$date) == "Sunday") | (weekdays(mydata$date) == "Saturday"))
?ddply
library(plyr)
?ddply
install.packages("dplyr")
addWeekDay <- function(x) {
if ((weekdays(x)=="Saturday")|(weekdays(x)=="Sunday")) return(1)
else return(2)
}
addweek(2012-12-1)
addweek(ad.Date("2012-12-1")
)
addWeekDay(ad.Date("2012-12-1"))
addWeekDay(as.Date("2012-12-1"))
addWeekDay(as.Date("2012-12-2"))
addWeekDay(as.Date("2012-12-3"))
library(plyr)
impute.median <- function(x) replace(x, is.na(x), median(x, na.rm = TRUE))
mydataNAImputed <- ddply(mydataNAImputed, ~ interval, transform, steps = impute.median(steps))
mydataNAImputed <- mydata
library(plyr)
impute.median <- function(x) replace(x, is.na(x), median(x, na.rm = TRUE))
mydataNAImputed <- ddply(mydataNAImputed, ~ interval, transform, steps = impute.median(steps))
View(mydataNAImputed)
View(mydataNAImputed)
mutate(mydataNAImputed,mydataNAImputed$weekday = addWeekDay(myDataNAImputed$date))
mutate(mydataNAImputed,weekday = addWeekDay(myDataNAImputed$date))
mutate(mydataNAImputed,weekday = addWeekDay(date))
View(mydataNAImputed)
mydataNAImputed <- mutate(mydataNAImputed,weekday = addWeekDay(date))
mydataNAImputed[,'weekday']<-as.factor(mydataNAImputed[,'weekday'])
View(mydataNAImputed)
View(mydataNAImputed)
View(mydataNAImputed)
View(mydataNAImputed)
?mapply
View(stepsByInterval)
mydata$step[1]
mydata$step[600]
mydata$step[900]
mydata$step[160]
mydata$step[1680]
mydata$step[4056]
mydata$step[4446]
stepsByInterval <- aggregate(steps~interval,mydataNAImputed,mean)
View(stepsByInterval)
?aggregate
aggregate.data.frame(steps~interval,mydataNAImputed,mean)
aggregate.data.frame(mydataNAImputed,date,mean)
aggregate.data.frame(mydataNAImputed,c('date'),mean)
aggregate.data.frame(mydataNAImputed,'date',mean)
aggregate.data.frame(mydataNAImputed,c('date'),mean)
aggregate.data.frame(mydataNAImputed,b=c('date'),mean)
aggregate.data.frame(mydataNAImputed,by=c('date'),mean)
aggregate(mydataNAImputed,by=c('date'),mean)
aggregate(x=mydataNAImputed,by=c('date'),FUN=mean)
aggregate(x=mydataNAImputed,by=c('date','weekday'),FUN=mean)
aggregate.data.frame(steps~interval,mydataNAImputed,mean)
aggregate(steps~interval,mydataNAImputed,mean)
aggregate.data.frame(steps~interval,mydataNAImputed,mean)
aggregate.data.frame(mydataNAImputed,list(date,weekday),mean)
addWeekDay <- function(x) {
if ((weekdays(x)=="Saturday")|(weekdays(x)=="Sunday")) return("weekend")
else return("weekday")
}
mydataNAImputed$weekday <- sapply(mydataNAImputed$date,addWeekDay) #apply to a new column
mydataNAImputed[,'weekday']<-as.factor(mydataNAImputed[,'weekday']) #convert to factor
aggregate.data.frame(mydataNAImputed,list(date,weekday),mean)
View(mydataNAImputed)
aggregate.data.frame(mydataNAImputed,list(weekday),mean)
aggregate.data.frame(mydataNAImputed,list(date),mean)
aggregate(mydataNAImputed,list(date),mean)
aggregate(mydataNAImputed,list(date),mean)
aggregate(mydataNAImputed,list('date'),mean)
aggregate(mydataNAImputed,list(date,c("weekend","weekday")),mean)
aggregate.data.frame(.~interval,mydataNAImputed,mean)
aggregate(.~interval,mydataNAImputed,mean)
aggregate(steps~cbind(interval,weekday),mydataNAImputed,mean)
aggregate(steps~interval+weekday,mydataNAImputed,mean)
pairs(mydata,type="l")
pairs(mydata,pch=19)
pairs(mydata,pch=.)
pairs(mydata,pch=".")
